/* aliases */
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
@import url("https://use.typekit.net/fsv8poc.css");
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

html {
  scroll-behavior: smooth; }

body {
  font-family: "ff-basic-gothic-pro", "Helvetica", "Arial", sans-serif;
  font-size: 16px;
  color: #232828;
  background-color: white;
  padding: 0;
  margin: 0;
  scroll-behavior: smooth;
  /* font weight normalization */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden; }
  body.locked {
    overflow: hidden; }

.container {
  z-index: 30;
  margin: 2em; }

img, picture {
  display: block;
  width: 100%;
  height: auto; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

h1, h2, h3, h4, h5, h6 {
  color: #232828; }

h1, .h1 {
  font-family: "ff-basic-gothic-pro", "Helvetica", "Arial", sans-serif;
  font-weight: 700;
  line-height: 1.25;
  letter-spacing: -1.5px;
  font-size: 2em; }
  @media screen and (min-width: 48.0625em) {
    h1, .h1 {
      font-size: 2.5em;
      line-height: 1.125; } }
  @media screen and (min-width: 75.0625em) {
    h1, .h1 {
      font-size: 3em;
      line-height: 1.05; } }

h2, .h2 {
  font-family: "ff-basic-gothic-pro", "Helvetica", "Arial", sans-serif;
  font-weight: 800;
  line-height: 1.153;
  letter-spacing: -0.5px;
  font-size: 1.625em; }
  @media screen and (min-width: 48.0625em) {
    h2, .h2 {
      font-size: 2em;
      line-height: 1.25; } }
  @media screen and (min-width: 75.0625em) {
    h2, .h2 {
      font-size: 2.25em; } }

h3, .h3 {
  font-family: "ff-basic-gothic-pro", "Helvetica", "Arial", sans-serif;
  font-weight: 800;
  line-height: 1.36;
  letter-spacing: 0;
  font-size: 1.375em; }
  @media screen and (min-width: 48.0625em) {
    h3, .h3 {
      font-size: 1.5em;
      line-height: 1.25; } }
  @media screen and (min-width: 75.0625em) {
    h3, .h3 {
      font-size: 1.75em; } }

h4, .h4 {
  font-family: "ff-basic-gothic-pro", "Helvetica", "Arial", sans-serif;
  font-weight: 800;
  line-height: 1.111;
  letter-spacing: 0.25px;
  font-size: 1.125em;
  color: #444D4F; }
  @media screen and (min-width: 48.0625em) {
    h4, .h4 {
      font-size: 1.125em;
      line-height: 1.222; } }

a {
  color: #931621;
  text-decoration: none; }

p, .p {
  font-weight: 400;
  color: #232828;
  line-height: 1.25;
  font-size: 1em;
  max-width: 32em; }
  @media screen and (min-width: 48.0625em) {
    p, .p {
      line-height: 1.375; } }

sup {
  font-size: 50%;
  vertical-align: middle; }

button {
  background-image: none;
  background-color: transparent;
  border-radius: none;
  box-shadow: none;
  -webkit-appearance: none;
  border: none;
  padding: 0;
  margin: 0;
  font-family: inherit; }

.button {
  line-height: 1; }

a.button {
  text-decoration: none; }

.works {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  place-content: top;
  gap: 9em 3em; }
  .works img {
    max-width: 400px; }
  @media screen and (max-width: 48em) {
    .works {
      display: block; } }

.work {
  text-align: center;
  position: relative; }
  .work p {
    margin: auto; }
  .work h1 {
    margin-bottom: 10px; }
  .work a h1, .work a .work-img {
    transition: all 0.5s; }
  .work a:hover h1 {
    color: #876e6e; }
  .work a:hover .work-img {
    max-width: 460px;
    height: 510px; }
  @media screen and (max-width: 48em) {
    .work {
      margin-bottom: 5em; } }

.work-img {
  margin: auto;
  max-width: 450px;
  height: 500px;
  background-size: cover;
  background-position: center; }
  @media screen and (max-width: 48em) {
    .work-img {
      max-width: 300px;
      height: 350px; } }

.work-img--mn-wp {
  background-image: url("img/mn-wt.png"); }

.work-img--ro-sd {
  background-image: url("img/ro-sd.png"); }

.work-img--mn-fof {
  background-image: url("img/mn-fof.png"); }

.work-img--tap-f {
  background-image: url("img/tap-footer.png"); }

.work-img--fs {
  background-image: url("img/fs.png"); }

.work-img--sc-sh {
  background-image: url("img/sc-sh.png"); }

.work-img--s-ef {
  background-image: url("img/s-1850.png"); }

nav > ul {
  list-style: none;
  display: flex; }
  nav > ul > li {
    margin-right: 1em; }

.select-css {
  display: block;
  font-size: 16px;
  font-family: sans-serif;
  font-weight: 700;
  color: #444;
  line-height: 1.3;
  padding: 0.6em 1.4em 0.5em 0.8em;
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  margin: 0;
  border: 1px solid #aaa;
  box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);
  border-radius: 0;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: #fff;
  background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20width%3D%2213px%22%20height%3D%227px%22%20viewBox%3D%220%200%2013%207%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0A%20%20%20%20%3Cg%20id%3D%22Page-1%22%20stroke%3D%22none%22%20stroke-width%3D%221%22%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%0A%20%20%20%20%20%20%20%20%3Cpolygon%20id%3D%22Triangle%22%20fill%3D%22%234A4A4A%22%20transform%3D%22translate(6.500000%2C%203.250000)%20rotate(-180.000000)%20translate(-6.500000%2C%20-3.250000)%20%22%20points%3D%226.5%201.13686838e-13%2013%206.5%200%206.5%22%3E%3C%2Fpolygon%3E%0A%20%20%20%20%3C%2Fg%3E%0A%3C%2Fsvg%3E"), linear-gradient(to bottom, #ffffff 0%, #ffffff 100%);
  background-repeat: no-repeat, repeat;
  background-position: right 0.7em top 50%, 0 0;
  background-size: 13px auto, 100%; }

.select-css::-ms-expand {
  display: none; }

.select-css:hover {
  border-color: #888; }

.select-css:focus {
  border-color: #aaa;
  box-shadow: 0 0 1px 3px rgba(59, 153, 252, 0.7);
  box-shadow: 0 0 0 3px -moz-mac-focusring;
  color: #222;
  outline: none; }

.select-css option {
  font-weight: normal; }

#home :root {
  --animation-time: 1s; }

#home body {
  background-color: black;
  background-image: url("../images/background.png");
  background-position: center top;
  background-repeat: no-repeat; }

#home .container {
  margin: auto; }

#home .header-text {
  position: relative;
  left: 100px;
  top: 200px;
  width: 800px;
  mix-blend-mode: lighten; }

#home .glitch {
  position: relative;
  font-family: 'VT323', monospace;
  font-size: 10em;
  /* letter-spacing: -30px;
    word-spacing: 30px;  */
  transform: skew(25deg, -20deg) scaleY(0.66667);
  color: white;
  isolation: isolate; }

#home .glitch::before,
#home .glitch::after {
  content: attr(data-text);
  position: absolute;
  top: 10;
  left: 0;
  height: 100%; }

#home .glitch::before {
  clip: rect(44px, 450px, 56px, 0);
  /* variation */
  left: 2px;
  text-shadow: -1px 0 red;
  animation: glitch-anim var(--animation-time) infinite;
  animation-timing-function: linear;
  animation-direction: alternate-reverse;
  /* important: opaque background masks the original */
  background: black; }

#home .glitch::after {
  animation: glitch-anim var(--animation-time) infinite;
  animation-timing-function: linear;
  animation-direction: alternate-reverse;
  /* variation */
  left: -2px;
  text-shadow: -1px 0 blue;
  /* important: opaque background masks the original */
  background: black; }

#home .spin {
  background-image: url("../images/pattern2.jpg");
  width: 170px;
  height: 170px;
  border-radius: 50%;
  margin: 0px;
  position: absolute;
  top: 40px;
  left: 60px;
  z-index: 250;
  animation: rotate 5.5s infinite;
  animation-name: rotate;
  animation-duration: 5.5s;
  animation-timing-function: linear;
  animation-delay: initial;
  animation-iteration-count: infinite;
  animation-direction: initial;
  animation-fill-mode: forwards;
  animation-play-state: initial;
  animation-fill-mode: forwards;
  animation-timing-function: linear; }

#home .triangle {
  position: absolute;
  top: 10px;
  left: 80px;
  z-index: 200;
  mix-blend-mode: difference; }

#home .circle {
  width: 300px;
  height: 300px;
  position: absolute;
  top: 40px;
  left: 120px;
  background: #bd0000;
  z-index: -100;
  border-radius: 50%;
  box-shadow: inset -20px 4px 50px 0px #440606;
  mix-blend-mode: difference; }

#home .computer {
  width: 400px;
  height: 400px;
  background-image: url("../images/meanwhile.png");
  background-size: initial;
  z-index: 300;
  position: absolute;
  top: 100px;
  left: 180px;
  background-repeat: no-repeat;
  animation: popin 1s infinite;
  animation-timing-function: linear;
  animation-direction: alternate-reverse; }

@keyframes rotate {
  0% {
    transform: rotate(0); }
  100% {
    transform: rotate(360deg); } }

@-webkit-keyframes rotate {
  from {
    -webkit-transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(360deg); } }

@-moz-keyframes rotate {
  from {
    -moz-transform: rotate(0deg); }
  to {
    -moz-transform: rotate(360deg); } }

@-ms-keyframes rotate {
  #home from {
    -ms-transform: rotate(0deg); }
  #home to {
    -ms-transform: rotate(360deg); } }

@keyframes popin {
  0% {
    background-size: 178px; }
  100% {
    background-size: 200px; } }

@keyframes glitch-anim {
  0% {
    clip: rect(100px, 800px, 200px, 0); }
  20% {
    clip: rect(29px, 800px, 16px, 0); }
  40% {
    clip: rect(200px, 800px, 3px, 0); }
  60% {
    clip: rect(42px, 800px, 90px, 0); }
  80% {
    clip: rect(15px, 800px, 13px, 0); }
  100% {
    clip: rect(53px, 800px, 5px, 0); } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
